(defvar icons "/usr/share/icons/Papirus-Dark")
	(defvar eww "eww")
(defvar show_date false)
	(defpoll time
	 :interval "1s"
	 :run-while "${!show_date}"
	 `date +%H:%M:%S`)
	(defpoll date
	 :interval "1s"
	 :run-while show_date
	 `date +%A"  "%B"  "%d", "%Y`)
	(defpoll day
	 :interval "60s"
	 `date +%d`)


	(defwidget time []
	 (box
		:class "time"
		:spacing 20
		:orientation "h"
		:space-evenly false
		(box :class "day" day)
		(eventbox
		 :class "timebox"
		 :onhover "${eww} update show_date=true"
		 :onhoverlost "${eww} update show_date=false"
		 :cursor "pointer"
		 (box
			:orientation "v"
			:valign "center"
			:space-evenly false
			(revealer :reveal {show_date}
			 :duration "500ms"
			 :transition "slidedown"
			 date)
			(revealer :reveal {!show_date}
			 :duration "500ms"
			 :transition "slidedown"
			 time))
		)
		)
		)

		(defwidget day []
		 day
		)
(defvar power false)
	(defwidget power-menu []
	 (eventbox	:onhover "${eww} update power=true"
		:onhoverlost "${eww} update power=false"
		(box		:orientation "h"
		 :space-evenly "false"
		 :vexpand "false"
		 :class "powermenu"
		 (button		:class "sus"
			:tooltip "Application Menu"
			:onclick "alacritty"
			(image :path "/usr/share/icons/Papirus-Dark/32x32/apps/among-us.svg"))
		 (revealer	:transition "slideright"
			:reveal power
			:duration "550ms"
			(box		:orientation "h"
			 :space-evenly "false"
			 (button :class "off-button"
				:tooltip "Shutdown"
				:onclick "shutdown now"
				(image :path "/usr/share/icons/Papirus-Dark/32x32/apps/system-shutdown.svg"))
			 (button		:class "reboot-button"
				:tooltip "Reboot"
				:onclick "reboot"
				(image :path "/usr/share/icons/Papirus-Dark/32x32/apps/system-reboot.svg"))
			 (button		:class "suspend-button"
				:tooltip "Suspend"
				:onclick "systemctl suspend"
				(image :path "/usr/share/icons/Papirus-Dark/32x32/apps/system-suspend.svg"))
			)))))

				(defpoll volume
				 :interval "1s"
				 "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{print $2}' | tr -d '%'")

(defvar show-volume false)
	(defwidget volume[]
	 (eventbox :class "volume wide"
		:onhover "${eww} update show-volume=true"
		:onhoverlost "${eww} update show-volume=false"
		:orientation "h"
		:space-evenly false
		(box :class "wide-inner"
		 :space-evenly false
		 (eventbox
			:onclick "firefox https://www.youtube.com/watch?v=5qap5aO4i9A"
			(image
			 :path {volume == 0.0 ? "images/volume-x.svg" :"images/volume-2.svg"  }
			 :image-width 24
			 :image-height 24))
		 (revealer :reveal {show-volume}
			:duration "500ms"
			:transition "slideright"
			(scale
			 :value volume
			 :onchange "amixer -D pulse sset Master {}%"
			 :orientation "h"
			 :tooltip " ${volume}%"
			 :min 0.0
			 :max 100.0
			)
		 )
		)
		)
		)

		(defvar brightness "")

(defvar show-brightness false)
	(defwidget brightness[]
	 (eventbox :class "wide brightness"
		:onhover "${eww} update show-brightness=true"
		:onhoverlost "${eww} update show-brightness=false"
		:orientation "h"
		:space-evenly false
		(box :class "wide-inner"
		 :space-evenly false
		 (eventbox
			:class "feather"
			:onclick "scripts/toggleKeyboard"
			(image
			 :path "images/sun.svg"
			 :image-width 24
			 :image-height 24))
		 (revealer :reveal {show-brightness}
			:duration "500ms"
			:transition "slideright"
			(scale
			 :round-digits 0
			 :value brightness
			 :onchange "scripts/brightness {}"
			 :orientation "h"
			 :tooltip "☀️  ${brightness}"
			 :min 0
			 :max 255
			)
		 )
		 )
		 )
		 )
		 (defpoll focused-window
			:interval "1s"
			"scripts/window-title")

		 (defwidget focus []
			(box
			 :class "focus"
			 focused-window

			))

		 (defwidget metric [value ?label class]
			(box :class "metric ${class}"
			 :tooltip "${round(value,0)}%"
			 :orientation "h"
			 :space-evenly false
			 (box label)
			 (scale
				:value value)))
		 (defpoll battery
			:interval "1s"
			"scripts/bat capacity")
		 (defpoll bat_icon
			:interval "1s"
			"scripts/bat icon")
		 (defwidget sys []
			(box
			 :space-evenly false
			 (metric :value {battery} :label {bat_icon} :class "bat")
			 (metric :value {EWW_RAM.used_mem_perc} :label "" :class "ram")
			 (metric :value {EWW_CPU.avg} :label "" :class "cpu")
			))

		 (defwidget bar [?gap border-radius monitor]
			(centerbox
			 :class "bar"
			 :width "${1920-2*gap}"
			 :height "40"
			 (box :class "left"
				:space-evenly false
				(power-menu)
				(brightness)
				(volume)
			 )
			 (focus)
			 (box :class "right"
				:space-evenly false
				:halign "end"
				(sys)
				(time)
			 )
			)
		 )

			(defwindow bar-middle
			 :monitor 0
			 :geometry (geometry
				 :x "0px"
				 :y "0px"
				 :width "100%"
				 :height "55px"
				 :anchor "top center")
			 :stacking "fg"
			 :exclusive true
			 :focusable false
			 (bar :gap 14 :border-radius 20 :monitor 0)
			)

			(defwindow bar-left
			 :monitor 1
			 :geometry (geometry
				 :x "0px"
				 :y "0px"
				 :width "100%"
				 :height "55px"
				 :anchor "top center")
			 :stacking "fg"
			 :exclusive true
			 :focusable false
			 (bar :gap 14 :border-radius 20 :monitor 0)
			)
			(defwindow bar-right
			 :monitor 2
			 :geometry (geometry
				 :x "0px"
				 :y "0px"
				 :width "100%"
				 :height "55px"
				 :anchor "top center")
			 :stacking "fg"
			 :exclusive true
			 :focusable false
			 (bar :gap 14 :border-radius 20 :monitor 0)
			)
