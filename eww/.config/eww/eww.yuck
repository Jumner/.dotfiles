(defvar icons "/usr/share/icons/Papirus-Dark")
	(defvar eww "eww")
(defvar show_date false)
	(defpoll time
	 :interval "1s"
	 :run-while "${!show_date}"
	 `date +%H:%M:%S`)
	(defpoll date
	 :interval "1s"
	 :run-while show_date
	 `date +%A"  "%B"  "%d", "%Y`)
	(defpoll day
	 :interval "60s"
	 `date +%d`)


	(defwidget time []
	 (box
		:class "time"
		:spacing 20
		:orientation "h"
		:space-evenly false
		(box :class "day" day)
		(eventbox
		 :class "timebox"
		 :onhover "${eww} update show_date=true"
		 :onhoverlost "${eww} update show_date=false"
		 :cursor "pointer"
		 (box
			:orientation "v"
			:valign "center"
			:space-evenly false
			(revealer :reveal {show_date}
			 :duration "500ms"
			 :transition "slidedown"
			 date)
			(revealer :reveal {!show_date}
			 :duration "500ms"
			 :transition "slidedown"
			 time))
		)
		)
		)

		(defwidget day []
		 day
		)
		(defwidget workspace-button [?workspace]
		 (button :class "workspace-button" :onclick "scripts/./interface set -w ${workspace}" "${workspace}"))
(defvar workspace false)
	(defwidget workspaces []
	 (eventbox :class "workspaces"
		:onhover "${eww} update workspace=true"
		:onhoverlost "${eww} update workspace=false"
		(box
		 :orientation "h"
		 :space-evenly false
		 :vexpand false
		 :tooltip "Change Workspaces"
		 "Workspaces"
		 (revealer
			:transition "slideright"
			:reveal workspace
			(box
			 :orientation "h"
			 :space-evenly false
			 (workspace-button :workspace "1")
			 (workspace-button :workspace "2")
			 (workspace-button :workspace "3")
			 (workspace-button :workspace "4")
			 (workspace-button :workspace "5")
			)
		 ))))
(defvar power false)
	(defwidget power-menu []
	 (eventbox	:onhover "${eww} update power=true"
		:onhoverlost "${eww} update power=false"
		(box		:orientation "h"
		 :space-evenly "false"
		 :vexpand "false"
		 :class "powermenu"
		 (button		:class "sus"
			:tooltip "Application Menu"
			:onclick "alacritty"
			(image :path "/usr/share/icons/Papirus-Dark/32x32/apps/among-us.svg"))
		 (revealer	:transition "slideright"
			:reveal power
			:duration "550ms"
			(box		:orientation "h"
			 :space-evenly "false"
			 (button :class "off-button"
				:tooltip "Shutdown"
				:onclick "shutdown now"
				(image :path "/usr/share/icons/Papirus-Dark/32x32/apps/system-shutdown.svg"))
			 (button		:class "reboot-button"
				:tooltip "Reboot"
				:onclick "reboot"
				(image :path "/usr/share/icons/Papirus-Dark/32x32/apps/system-reboot.svg"))
			)))))

				(defpoll volume
				 :interval "1s"
				 "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{print $2}' | tr -d '%'")

(defvar show-volume false)
	(defwidget volume[]
	 (eventbox :class "volume wide"
		:onhover "${eww} update show-volume=true"
		:onhoverlost "${eww} update show-volume=false"
		:orientation "h"
		:space-evenly false
		(box :class "wide-inner"
		 :space-evenly false
		 (eventbox
			:onclick "firefox https://www.youtube.com/watch?v=5qap5aO4i9A"
			"")
		 (revealer :reveal {show-volume}
			:duration "500ms"
			:transition "slideright"
			(scale
			 :value volume
			 :onchange "amixer -D pulse sset Master {}%"
			 :orientation "h"
			 :tooltip " ${volume}%"
			 :min 0.0
			 :max 100.0
			)
		 )
		)
		)
		)

		(defpoll brightness
		 :interval "60s"
		 "cat /sys/class/backlight/amdgpu_bl0/brightness")

(defvar show-brightness false)
	(defwidget brightness[]
	 (eventbox :class "wide brightness"
		:onhover "${eww} update show-brightness=true"
		:onhoverlost "${eww} update show-brightness=false"
		:orientation "h"
		:space-evenly false
		(box :class "wide-inner"
		 :space-evenly false
		 (eventbox
			:class "feather"
			:onclick "scripts/toggleKeyboard"
			"☀️")
		 (revealer :reveal {show-brightness}
			:duration "500ms"
			:transition "slideright"
			(scale
			 :value brightness
			 :onchange "scripts/brightness {}"
			 :orientation "h"
			 :tooltip "☀️ ${brightness}"
			 :min 0
			 :max 255
			)
		 )
		)
		)
		)
		(defpoll focused-window
		 :interval "1s"
		 "ps -p $(xdotool getwindowfocus getwindowpid) -o comm=")

		(defwidget focus []
		 (box
			:class "focus"
			focused-window

		 ))

		(defwidget metric [value ?label class]
		 (box :class "metric ${class}"
			:tooltip "${round(value,0)}%"
			:orientation "h"
			:space-evenly false
			(box label)
			(scale
			 :value value)))
		(defpoll internet
		 :interval "60s"
		 "scripts/internet")
		(defwidget net[]
		 (image :path {internet ? "/usr/share/icons/Papirus-Dark/32x32/status/online.svg" : "/usr/share/icons/Papirus-Dark/32x32/status/offline.svg"})
		)
		(defpoll battery
		 :interval "1s"
		 "scripts/bat capacity")
		(defpoll bat_icon
		 :interval "1s"
		 "scripts/bat icon")
		(defwidget sys []
		 (box
			:space-evenly false
			(metric :value {battery} :label {bat_icon} :class "bat")
			(metric :value {EWW_RAM.used_mem_perc} :label "" :class "ram")
			(metric :value {EWW_CPU.avg} :label "" :class "cpu")
			(net)
		 ))

		(defwidget bar [?gap border-radius monitor]
		 (centerbox
			:class "bar"
			:width "${1920-2*gap}"
			:height "40"
			(box :class "left"
			 :space-evenly false
			 (power-menu)
			 (workspaces)
			)
			(focus)
			(box :class "right"
			 :space-evenly false
			 :halign "end"
			 (brightness)
			 (volume)
			 (sys)
			 (time)
			)
		 )
		)

		 (defwindow bar-middle
			:monitor 0
			:geometry (geometry
				:x "0px"
				:y "0px"
				:width "100%"
				:height "55px"
				:anchor "top center")
			:stacking "fg"
			:reserve (struts :distance "55px" :side "top")
			:windowtype "dock"
			:wm-ignore false
			(bar :gap 15 :border-radius 20 :monitor 0)
		 )

		 (defwindow main-panel
			:monitor 0
			:geometry (geometry
				:x "0px"
				:y "0px"
				:width "100px"
				:height "100px"
				)
			:stacking "fg"
			:wm-ignore true
			"hey")
